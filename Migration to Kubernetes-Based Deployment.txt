Project Structure Overview

Solution consists of the following components:

    Microservices:
        BorrowingManagement
        InventoryManagement
        OrdersManagement

    Shared Library:
        CommunicationShared

    Configuration Files:
        docker-compose.yml
        docker-compose.override.yml
        Dockerfiles for each microservice

Current Docker Compose Setup:

    Microservices:
        borrowingmanagement
        inventorymanagement
        ordersmanagement

    Infrastructure:
        sqldata (MS SQL Server)
        rabbitmq (RabbitMQ)

Transitioning to Kubernetes (deploying to a local Kubernetes cluster)

Initial clean up:

    E:\Development\LibraryBorrowingSystemKubernetes\Deployment>kubectl delete -f kubernetes-resources.yaml
    E:\Development\LibraryBorrowingSystemKubernetes\Deployment>kubectl delete -f https://raw.githubusercontent.com/kubernetes/ingress-nginx/main/deploy/static/provider/cloud/deploy.yaml

Set Ingress:

    E:\Development\LibraryBorrowingSystemKubernetes\Deployment>kubectl apply -f https://raw.githubusercontent.com/kubernetes/ingress-nginx/main/deploy/static/provider/cloud/deploy.yaml

Check Ingress:

    E:\Development\LibraryBorrowingSystemKubernetes\Deployment>kubectl get svc -n ingress-nginx

Build Docker images: 

    docker-compose build

Push images to a registry (Docker Hub):

    E:\Development\LibraryBorrowingSystemKubernetes>docker login
    Authenticating with existing credentials...
    Login Succeeded

    Tag and push each image:

    E:\Development\LibraryBorrowingSystemKubernetes>docker build -t bluesurviver/ordersmanagement:latest -f OrdersManagement/Dockerfile .
    E:\Development\LibraryBorrowingSystemKubernetes>docker push bluesurviver/ordersmanagement:latest

    E:\Development\LibraryBorrowingSystemKubernetes>docker build -t bluesurviver/inventorymanagement:latest -f InventoryManagement/Dockerfile .
    E:\Development\LibraryBorrowingSystemKubernetes>docker push bluesurviver/inventorymanagement:latest

    E:\Development\LibraryBorrowingSystemKubernetes>docker build -t bluesurviver/borrowingmanagement:latest -f BorrowingManagement/Dockerfile .
    E:\Development\LibraryBorrowingSystemKubernetes>docker push bluesurviver/borrowingmanagement:latest

Create Kubernetes manifest file:

    /Deployment/kubernetes-resources.yaml (show the file)

Apply the Kubernetesmanifest file:

    E:\Development\LibraryBorrowingSystemKubernetes\Deployment>kubectl apply -f kubernetes-resources.yaml

Verify deployments:

    E:\Development\LibraryBorrowingSystemKubernetes\Deployment>kubectl get deployments

Check the services:
    E:\Development\LibraryBorrowingSystemKubernetes\Deployment>kubectl get services

Check the pods:

   E:\Development\LibraryBorrowingSystemKubernetes\Deployment>kubectl get pods

In visual Studio Developer Shell create the database in the SQL pod:
    PS E:\Development\LibraryBorrowingSystemKubernetes\ordersmanagement>dotnet ef database update --context OrderStateDbContext --connection "Server=127.0.0.1,30033;Database=LibraryBorrowingSystem;User Id=sa;Password=yourStrong!Password;TrustServerCertificate=True"

Scale up (increment the number of pods for each service to 5):
    
    E:\Development\LibraryBorrowingSystemKubernetes\Deployment>kubectl scale deployment ordersmanagement-deployment --replicas=5
    E:\Development\LibraryBorrowingSystemKubernetes\Deployment>kubectl scale deployment inventorymanagement-deployment --replicas=5
    E:\Development\LibraryBorrowingSystemKubernetes\Deployment>kubectl scale deployment borrowingmanagement-deployment --replicas=5

Check the services through Ingress:

    E:\Development\LibraryBorrowingSystemKubernetes\Deployment>kubectl get ingress

Access the services(use separate Command Prompt consoles !):

    E:\Development\LibraryBorrowingSystemKubernetes\Deployment>kubectl port-forward svc/ordersmanagement-service 8082:80 -n default

    E:\Development\LibraryBorrowingSystemKubernetes\Deployment>kubectl port-forward svc/rabbitmq-service 8083:15672 -n default
    
    In browser:

    http://localhost:8082/swagger/index.html

    http://localhost:8083